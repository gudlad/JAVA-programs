OOPs Concepts:   
security, maitainance, modularity, enhancement of code

* data hiding --
-- Outside person shouldn't access our data directly
-- implemented by private keyword + getters, setters  : userid ,password authentication in any website

* abstraction -- interfaces, abtract classes 
-- hiding the internal details and highlighting the set of services = ex: bank ATM
--> abstract classes 0-100% abstraction.
--> interfaces 100% abstraction.


1* Encapsulation --  (data hiding + abstraction)
-- Wrapping of data members (variables) and member methods(methods) in a single unit.
-- Every java class is an example of encapsulation 
-- data members + methods that  alter the data memebers
--- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

OOP : code reusability
-- ---------------------------------------------------------------------------------------------------------------------
2*  Inheritence : mechanism in java by which one class is allowed to inherit the features of another class.
-- Keywords: extends, super, this
-- 5 types : single inheritance, multi level inheritance, hierarchical inheritance, multiple inheritance, hybrid inheritance.
---- ---------------------------------------------------------------------------------------------------------------
this  -> refers to current invoking object.
      -> this(),this.
      -> used to call one constructor from another constructor depending on the on the arguments inside same class.

super -> refers to immediate parent of the current invoking object
      -> super(),super.
      -> used to call parent class constructor from child class constructor.
      -> access the parent's variables and methods.

OOP : provides flexibility to the programmer

***3 POLYMORPHISM *** ----------------------------------------------------------------

* method overloading
-- COMPILE TIME POLYMORPHISM || STATIC POLYMORPHISM || EARLY BINDING
-- more flexibility 
-- reduces complexity
-- method siganature ( method name, argument types)
-- method resolution taken care by compiler at compile time based on reference types
-- return type can be same or different it doesn't matter
-- compiler & reference types are related, which workes in method overloding

--- - -----------------------------------------------------------------------------------------------------------------------

* method overriding
-- if the child class not satisfied with parent class method it can redefine methods that it inherits according to it's requirements
-- JVM & runtime object type are related, which workes in method overriding
-- RUN TIME POLYMORPHISM || DYNAMIC POLYMORPHISM || LATE BINDING
-- return type should be same for primitive return types 
-- return type can be same or covariant  for object return types

------------------------------------------------------------------------------------------------
*** case study ***
------------------
A a =new B();

A a - reference type
new B() - runtime object type

if A is parent class and B is child,
when I do, A a=new B();
case 1:
suppose m1() method is present in both class then m1() method of class B called

case 2:
suppose m1() method is present in A not in B   then m1() method of class A is called

case 3:
suppose m1() method is present in B not in A   then compile time error

--- ---------------------------------------------------------------------
-- static methods are class level methods and normal methods are object methods
-- statics methods can't be overridden by objects methods
-- objects methods can't be overridden by classes methods

* Method hiding
-- when we try to override the parent class static method with child class static method
   it will become method hiding
-- Both parent and child class methods should be static methods
-- method resolution taken care by compiler
-- So it is also called compile time POLYMORPHISM or early Binding or static POLYMORPHISM

-- -------------------------------------------------------------------------------

* there is no variable overriding concept 
* the variable resolution is always done by the compiler
 whether the variable is static or instance variable
-- some times called variable hiding or shadowing

-- -------------------------------------------------------------------------------

Exception: handling:

Exception(runtime error):
an unwanted or unexpected event that disturbs the normal flow of 
the execution of the the program is called Exception

If Exception not handled the program will terminate abnormally

Excpetions are recoverable
Errors are not recoverable, they are caused by lack of system resources  
ex:VirtualMachineError

2 types checked and unchecked Excpetions
Excpetions always occur at runtime not compile times

exceptions that are checked by compiler for smooth execution of code at runtime are called checked exceptions
ex: FileNotFoundException

exceptions not checked by compiler whether programmer handles or not
are called unchecked exceptions.
ex: Arithmatic Exception

throw: throw keyword is used to throw custom exception
it handover the custom created exception to the JVM

--- --------------------------------------------------------------------
** MULTI THREADING IN JAVA **

In multitasking there are 2 types:
* process (running program) based multingtasking --> (OS LEVEL)more than one indepent process run simultaneously
* thread based multingtasking  -->(programmatic level) within tha same program several indepenet parts can run simultaneously called threads.


JDK --> JVM,JAVA COMPILER, JAVA API LIBRARY

JAVA API LIBRARY --> builtin classes, interfaces, and methods
Ex: threadName.start()
here start() no need of implementation provided by  java api libarary
90% of the tasks are done by API
only 10% tasks have to be done by the programmers

JAVA PROVIDES INBUILT SUPPORT VIA THE JAVA API LIBRARY


javac filename.java --> javac is the java compiler
java filename  --> java is the java interpreter


thread created in two ways
1. implementation of the runnable interface
2. extending the Thread class  ( Thread is api class)


Thread is each flow of execution
Every Thread has it's own separate indepenet JOB

methods --> run(), start();


